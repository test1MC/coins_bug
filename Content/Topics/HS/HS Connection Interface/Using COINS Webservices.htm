<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="1997" MadCap:lastWidth="1521">
    <head>
    </head>
    <body>
        <h1>Using <MadCap:variable name="General.ProductName" /> Webservices</h1>
        <p>&#160;</p>
        <p><MadCap:variable name="General.ProductName" /> web services are accessed using the SOAP protocol by posting an XML document as the entire body of an HTTP request to the URL. All web services are accessed using the same URL – the elements within the SOAP message specify what object(s) are used.</p>
        <p>Unlike most SOAP interfaces the <MadCap:variable name="General.ProductName" /> interface allows you to call many methods on many objects in the same XML request. It is also maintains state between method calls within the same XML message. Most operations require a sequence of methods to be called within the same XML message and these methods are executed as a single database transaction. It is not possible to run multiple SOAP requests in the same transaction or split a single request into multiple transactions.</p>
        <p>Due to these restrictions and the way methods and arguments are represented in the XML, it is not possible to represent the  <MadCap:variable name="General.ProductName" /> web services using the WDSL definition language and hence it is not possible to add “Web References” to Microsoft.NET projects to invoke them.</p>
        <p>&#160;</p>
        <p>it is recommended that UTF-8 is used regardless of the underlying database encoding</p>
        <p>&#160;</p>
        <p>The following c# function executes a <MadCap:variable name="General.ProductName" /> web service call from a .NET application:</p>
        <p>&#160;</p>
        <p class="code">{</p>
        <p class="code">//NOTE: This method will throw an System.Net.WebException</p>
        <p class="code">//error if an HTTP failure occurs</p>
        <p class="code">&#160;</p>
        <p class="code">HttpWebRequest req = HttpWebRequest)HttpWebRequest.Create(url);</p>
        <p class="code">req.ContentType="text/xml";</p>
        <p class="code">req.Method="POST";</p>
        <p class="code">StreamWriter writer = new StreamWriter(req.GetRequestStream(),</p>
        <p class="code">System.Text.UnicodeEncoding.UTF8);</p>
        <p class="code">writer.Write(datain + "\r\n\r\n");</p>
        <p class="code">writer.Close();</p>
        <p class="code">&#160;</p>
        <p class="code">//Timeout period in milliseconds – set to 3 mins here</p>
        <p class="code">req.Timeout = 180000;</p>
        <p class="code">HttpWebResponse response = (HttpWebResponse)req.GetResponse();</p>
        <p class="code">StreamReader reader = new StreamReader(</p>
        <p class="code">response.GetResponseStream(),</p>
        <p class="code">System.Text.UnicodeEncoding.UTF8);</p>
        <p class="code">dataout = reader.ReadToEnd();</p>
        <p class="code">reader.Close();</p>
        <p class="code">return (response.StatusCode == HttpStatusCode.OK);</p>
        <p class="code">}</p>
        <p>After the call dataout contains the response XML as a string which can be loaded into an XML parser.</p>
    </body>
</html>